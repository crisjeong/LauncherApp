<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- 전역 리소스 정의 -->
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#1e1e1e"/>
    <SolidColorBrush x:Key="WindowForegroundBrush" Color="#ffffff"/>

    <FontFamily x:Key="Roboto">applicaton:,,,/Fonts/Roboto/#Roboto</FontFamily>
    <FontFamily x:Key="Roboto-Black">applicaton:,,,/Fonts/Roboto/#Roboto Black</FontFamily>
    <FontFamily x:Key="RobotoCondensed">applicaton:,,,/Fonts/Roboto/#Roboto Condensed</FontFamily>
    <FontFamily x:Key="RobotoCondensed-Light">applicaton:,,,/Fonts/Roboto/#Roboto Condensed Light</FontFamily>
    <FontFamily x:Key="Roboto-Light">applicaton:,,,/Fonts/Roboto/#Roboto Light</FontFamily>
    <FontFamily x:Key="Roboto-Medium">applicaton:,,,/Fonts/Roboto/#Roboto Medium</FontFamily>
    <FontFamily x:Key="Roboto-Thin">applicaton:,,,/Fonts/Roboto/#Roboto Thin</FontFamily>

    
    <!-- 모든 텍스트에 Roboto 폰트 적용 -->
    <Style TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource Roboto-Black}"/>
    </Style>

    <Style TargetType="Control">
        <Setter Property="FontFamily" Value="{StaticResource Roboto-Black}"/>
    </Style>
    
    
    
    

    <!-- Label 스타일 정의 -->
    <Style TargetType="Label" x:Key="DarkThemeLabelStyle">
        <Setter Property="Foreground" Value="{DynamicResource WindowForegroundBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="5,2,5,2"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    

    <!-- DataGrid Header 스타일 정의 -->
    <Style x:Key="CustomDataGridColumnHeaderStyle" TargetType="DataGridColumnHeader">
        <!--<Setter Property="Background" Value="LightGray"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderBrush" Value="Gray"/>-->
        <Setter Property="Background" Value="#1e1e1e"/>
        <Setter Property="Foreground" Value="#ffffff"/>
        <Setter Property="BorderBrush" Value="#444444"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5"/>
    </Style>

    <!-- 특정 ColumnHeader만 정렬하는 스타일 (기본 스타일 상속) -->
    <Style x:Key="LeftAlignedDataGridColumnHeaderStyle" 
           TargetType="DataGridColumnHeader"
           BasedOn="{StaticResource CustomDataGridColumnHeaderStyle}">
        <!-- 상속받은 스타일에서 가로 정렬만 재정의 -->
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>


    <!-- Reusable Style for DataGridTextColumn -->
    <Style x:Key="CenteredTextColumnStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <!--<Setter Property="Foreground" Value="#ffffff"/>-->
    </Style>

    <Style x:Key="LeftAlignedTextColumnStyle" TargetType="TextBlock">
        <!-- 텍스트 박스에도 동일한 마진 설정 -->
        <Setter Property="Margin" Value="5,2,5,2"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
    </Style>

    <!-- Style for DataGridRow to ensure selection color is maintained -->
    <Style x:Key="CustomDataGridRowStyle" TargetType="DataGridRow">
        <Setter Property="Background" Value="#2e2e2e"/>
        <Setter Property="Foreground" Value="#ffffff"/>
        <!-- 최소 높이 설정 -->
        <Setter Property="MinHeight" Value="30"/>
        <!-- 고정되지 않도록 Auto 설정 -->
        <Setter Property="Height" Value="Auto"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <!-- 선택된 행의 배경색을 더 어둡게 설정 -->
                <Setter Property="Background" Value="#5a5a5a"/>
                <!-- 텍스트 색상을 밝은 색으로 설정 -->
                <Setter Property="Foreground" Value="#ffffff"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
                <!-- 선택되지 않은 상태의 배경색 유지 -->
                <Setter Property="Background" Value="#2e2e2e"/>
                <!-- 선택되지 않은 상태의 텍스트 색상 유지 -->
                <Setter Property="Foreground" Value="#ffffff"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style for DataGrid -->
    <Style TargetType="DataGrid">
        <Setter Property="Background" Value="#1e1e1e"/>
        <Setter Property="Foreground" Value="#ffffff"/>
        <Setter Property="BorderBrush" Value="#444444"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="GridLinesVisibility" Value="All"/>
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="#2e2e2e"/>
                    <Setter Property="Foreground" Value="#ffffff"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="BorderBrush" Value="#444444"/>
                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    
                     <!--헤더의 최소 높이 설정--> 
                    <Setter Property="MinHeight" Value="30"/>
                     <!--패딩을 추가하여 텍스트 정렬 개선--> 
                    <Setter Property="Padding" Value="5"/>
                    
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for Buttons -->
    <!--<Style TargetType="Button">
        <Setter Property="Background" Value="#444444"/>
        <Setter Property="Foreground" Value="#ffffff"/>
        <Setter Property="BorderBrush" Value="#555555"/>
        <Setter Property="Padding" Value="5,2"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>-->
    <Style TargetType="Button" x:Key="RoundedButtonStyle">
        <Setter Property="Background" Value="#444444"/>
        <Setter Property="Foreground" Value="#ffffff"/>
        <Setter Property="BorderBrush" Value="#555555"/>
        <Setter Property="Padding" Value="5,2"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="60"/>
        <Setter Property="Height" Value="25"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <!-- 모서리를 둥글게 설정 -->
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}"
                            CornerRadius="2" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- MouseOver 상태 시 배경색 변경 -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <!-- MouseOver 색상 -->
                            <Setter TargetName="border" Property="Background" Value="#FF005A9E"/>
                        </Trigger>
                        <!-- MouseLeave 시 원래 색상으로 복귀 -->
                        <Trigger Property="IsPressed" Value="True">
                            <!-- 클릭 시 색상 -->
                            <Setter TargetName="border" Property="Background" Value="#FF003A7E"/>
                        </Trigger>
                        <!-- 비활성화 상태일 때 색상 변경 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <!-- 비활성화 배경색 -->
                            <Setter TargetName="border" Property="Background" Value="#FFCCCCCC"/>
                            <!-- 비활성화 텍스트 색상 -->
                            <Setter Property="Foreground" Value="#FFAAAAAA"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>
